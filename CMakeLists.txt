cmake_minimum_required(VERSION 3.7)
project (chronicle CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

include_directories("$PROJECT_SOURCE_DIR"
lame
)

IF (UNIX AND NOT WIN32)
    include_directories(/usr/include/rtaudio)
endif()

if (WIN32)
    include_directories(/usr/$ENV{COMPILER_TRIPLET}/include/boost-1_68
    /usr/$ENV{COMPILER_TRIPLET}/include
    )
endif()

add_compile_options(-DSPDLOG_COMPILED_LIB -D_WIN32_WINNT=0x600 -D_ISOC99_SOURCE -lole32 -lwinmm -ldsound -Wl,--trace)
#add_subdirectory(rtaudio)
#add_subdirectory(spdlog)
find_package(spdlog REQUIRED)

find_library(LAME_LIB libmp3lame.a)
if (LAME_LIB OR lame_FOUND)
    message(STATUS "Found LAME")
else()
    message(FATAL_ERROR "Could not find lame! Exiting...")
endif()

find_library(SNDFILE_LIB sndfile)
if (SNDFILE_LIB OR sndfile_FOUND)
    message(STATUS "Found libsndfile")
else()
    message(FATAL_ERROR "Could not find libsndfile! Exiting...")
endif()

#find_package(PkgConfig REQUIRED)
find_library(RTAUDIO_LIB rtaudio)
#pkg_check_modules(RtAudio REQUIRED IMPORTED_TARGET rtaudio)
if (RTAUDIO_LIB OR rtaudio_FOUND)
    message(STATUS "Found RtAudio: ${RTAUDIO_LIB}")
else()
    message(FATAL_ERROR "Could not find RtAudio! Exiting...")
endif()

set(Boost_DEBUG ON)
find_package(Boost REQUIRED filesystem program_options)
if(Boost_FILESYSTEM_FOUND)
    message(STATUS "Found Boost filesystem...")
    if (Boost_FILESYSTEM_LIBRARY)
        message(STATUS "  Found Boost filesystem libraries")
    else()
        message(FATAL_ERROR "  Could not found Boost filesystem library! Exiting...")
    endif()
else()
    message(FATAL_ERROR "Could not find the Boost filesystem component! Exiting...")
endif()


add_executable(chronicle chronicle.cpp
parse_opts.cpp
screen.cpp
)

target_link_libraries(chronicle PRIVATE
spdlog::spdlog
${LAME_LIB}
${SNDFILE_LIB}
${RTAUDIO_LIB}
${Boost_LIBRARIES}
ncurses)

# add_custom_command(TARGET chronicle POST_BUILD
# COMMAND python $<TARGET_FILE_DIR:chronicle>/../.ci/mingw32/list_full_deps.py $<TARGET_FILE:chronicle> OUTPUT_VARIABLE DEP_LIBS
# VERBATIM
# )

# set(CPACK_PACKAGE_NAME "chronicle")
# SET(CPACK_GENERATOR "STGZ;TGZ;TZ;ZIP")
# set(CPACK_PROJECT_NAME chronicle)
# SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
# set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
# SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENCE.md")
# SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 1)
# SET(CPACK_PACKAGE_EXECUTABLES chronicle.exe;Chronicle)
# set(CPACK_PACKAGE_VENDOR "Cal McLean")
# set(CPACK_PACKAGE_CONTACT "calmcl1@aol.com")
# set(CPACK_SOURCE_PACKAGE_FILE_NAME "chronicle-src")
# SET(CPACK_SOURCE_GENERATOR "TGZ;TZ")
# set (CPACK_SOURCE_IGNORE_FILES \.git/;\.git.*;\.ci/;\.cirrus\.yml;__build;\.vscode)
# include(CPack)

# list(APPEND DEPS "")
# IF(WIN32)
#     #list(APPEND EXTERNAL_LIBS=)
#     install(TARGETS chronicle COMPONENT RUNTIME DESTINATION .)
#     # getDeps()
#     # install(CODE "execute_process(COMMAND ../copydeps.sh ${CPACK_PACKAGE_DIRECTORY})" COMPONENT RUNTIME)
#     # install(CODE "MESSAGE(STATUS \"CMakePackDirL \${CPACK_PACKAGE_DIRECTORY}\")" COMPONENT RUNTIME)
#     # install(CODE "set(DIRHERE \"${CMAKE_CURRENT_SOURCE_DIR}\")")
#     # install(SCRIPT test.cmake COMPONENT RUNTIME)
#     # install(FILES ${DEPS} DESTINATION . COMPONENT RUNTIME)
# ENDIF()


# #include(InstallRequiredSystemLibraries)