env:
  BACKBLAZE_APP_KEY_ID: ENCRYPTED[95a37d7a31679c7fb32b03d05b33edb065dcf7f0f823e7fe721e3247e5f3668d4063591d5c733ade1fd7a32f5f859c5f]
  BACKBLAZE_APP_KEY: ENCRYPTED[770e70e48569f43396e50d0692a4c1abe64e4821c1ef816520c792ad6222c61641b7e56132e37896340f740720196604]

pipe:
  name: Build chronicle and deploy
  steps:
    - image: .ci/Dockerfile.linux
      build_script:
        - mkdir -p __build/linux
        - cd __build/linux
        - cmake ../..
        - cmake --build .
    - image: .ci/Dockerfile.winx64
      # matrix:
      #   - {
      #       env:
      #         { BITNESS: x64, GENERATOR_STRING: "Visual Studio 15 2017 Win64" },
      #     }
      #   - { env: { BITNESS: x86, GENERATOR_STRING: "Visual Studio 15 2017" } }
      curses_download_cache:
        folder: PDCurses
        fingerprint_script: echo pdcurses-fingerprint-2
        populate_script:
          - git clone https://github.com/wmcbrine/PDCurses

      curses_build_script:
        - cd PDCurses/wincon
        - set VSCMD_DEBUG=1
        - '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%BITNESS%'
        - nmake -f Makefile.vc UTF8=Y WIDE=y
        - cmake -E copy ../curses.h C:/include
        - cmake -E copy ../panel.h C:/include
        - cmake -E copy ../curspriv.h C:/include
        - cmake -E copy pdcurses.lib C:/lib
        - nmake -f Makefile.vc clean # Remove the generated files, so they aren't cached

      lame_download_cache:
        folder: lame-3.100
        fingerprint_script: echo lame-3.100-fingerprint-2
        populate_script:
          - aria2c https://netix.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          - 7z x lame-3.100.tar.gz
          - 7z x lame-3.100.tar
          - cd lame-3.100
          - ps: ((Get-Content -path .\Makefile.MSVC -Raw) -replace '/machine:I386','/machine:X64') | Set-Content -path .\Makefile.MSVCx64 # Setup for x64
          - cmake -E copy Makefile.MSVC Makefile.MSVCx86
          - cmake -E copy configMS.h config.h

      lame_build_script:
        - cd lame-3.100
        - set VSCMD_DEBUG=1
        - '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%BITNESS%'
        - nmake -f Makefile.MSVC%BITNESS% comp=msvc asm=no DLL /D
        - cmake -E copy output\libmp3lame.dll C:/lib
        - cmake -E copy output\libmp3lame-static.lib C:/lib
        - nmake -f Makefile.MSVC%BITNESS% comp=msvc asm=no clean /D

      rtaudio_download_cache:
        folder: rtaudio-5.1.0
        fingerprint_script: echo rtaudio-5.1.0-fingerprint-0
        populate_script:
          - aria2c http://www.music.mcgill.ca/~gary/rtaudio/release/rtaudio-5.1.0.tar.gz
          - 7z x rtaudio-5.1.0.tar.gz
          - 7z x rtaudio-5.1.0.tar

      rtaudio_build_script:
        - cd rtaudio-5.1.0
        - cmake -E make_directory __build && cd __build
        - cmake -G "%GENERATOR_STRING%" .. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=%BITNESS%-windows --debug-output
        - cmake --build . -v --config Release
        - cmake --install .
        - cd ..
        - cmake -E copy __build\Release\rtaudio.lib C:/lib
        - cmake -E copy __build\Release\rtaudio.dll C:/lib
        - cmake -E copy ./RtAudio.cpp C:/include
        - cmake -E copy RtAudio.h C:/include
        - cmake -E remove_directory __build # Remove the generated files, so they aren't cached

      build_script:
        - cmake -E make_directory __build/win%BITNESS% && cd __build/%BITNESS%
        - cmake -G "%GENERATOR_STRING%" ../.. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=%BITNESS%-windows --debug-output
        - cmake --build . -v --config Release
        - cmake -E copy C:/lib/rtaudio.dll Release/

    - image: gcc:latest
      package_script:
        - CHRONICLE_MAJOR_VERSION=`awk '/MAJOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_MINOR_VERSION=`awk '/MINOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_PATCH_VERSION=`awk '/PATCH/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_VERSION=${CHRONICLE_MAJOR_VERSION}.${CHRONICLE_MINOR_VERSION}.${CHRONICLE_PATCH_VERSION}
        - CHRONICLE_EXTRA_FILES="LICENCE.md README.md CHANGELOG.md"
        - CHRONICLE_DISTS="linux winx64 winx32"
        - for DIST in ${#CHRONICLE_DISTS[@]} do; cd __build/${DIST}; for EXTRA_FILE in ${CHRONICLE_EXTRA_FILES[@]} do; cp ../../${EXTRA_FILE} . ; done; cd ../..; done;
        - CHRONICLE_TRIPLET=chronicle-${CHRONICLE_VERSION}-linux
        - cd __build
        - mv ./linux ${CHRONICLE_TRIPLET}
        - zip -rq9 ${CHRONICLE_TRIPLET}.zip ${CHRONICLE_TRIPLET}
        - tar czf ${CHRONICLE_TRIPLET}.tar.gz ${CHRONICLE_TRIPLET}
        - cd ../build/winx86
        - CHRONICLE_TRIPLET=chronicle-${CHRONICLE_VERSION}-win32
        - zip -rq9 ${CHRONICLE_TRIPLET}.zip ../${CHRONICLE_TRIPLET}
        - cd ../winx64
        - CHRONICLE_TRIPLET=chronicle-${CHRONICLE_VERSION}-win64
        - zip -rq9 ${CHRONICLE_TRIPLET}.zip ../${CHRONICLE_TRIPLET}

    - image: gcc:latest
      only_if: $CIRRUS_BRANCH == 'master'
      publish_script:
        - apt update && apt install python python-pip -y
        - pip install b2
        - CHRONICLE_MAJOR_VERSION=`awk '/MAJOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_MINOR_VERSION=`awk '/MINOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_PATCH_VERSION=`awk '/PATCH/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
        - CHRONICLE_VERSION=${CHRONICLE_MAJOR_VERSION}.${CHRONICLE_MINOR_VERSION}.${CHRONICLE_PATCH_VERSION}
        - b2 authorize-account $BACKBLAZE_APP_KEY_ID $BACKBLAZE_APP_KEY
        - CHRONICLE_FILE_NAMES=chronicle-${CHRONICLE_VERSION}-linux.tar chronicle-${CHRONICLE_VERSION}-linux.zip chronicle-${CHRONICLE_VERSION}-win32.zip chronicle-${CHRONICLE_VERSION}-64.zip
        - for CHRONICLE_FILE in ${#CHRONICLE_FILE_NAMES[@]} do; b2 upload_file chronicle-releases ${CHRONICLE_FILE} ${CHRONICLE_FILE}; done;
# linux_build_task:
#   container:
#     dockerfile: .ci/Dockerfile.linux

#   build_script:
#     - mkdir -p __build
#     - cd __build
#     - cmake ..
#     - cmake --build .

#   dist_script:
#     - chmod +x .ci/*.sh
#     - .ci/chronicle-create-dist-archives.sh

#   package_artifacts:
#     path: __build/chronicle-*-linux.*

# win_build_task:
#   matrix:
#     - {
#         env: { BITNESS: x64, GENERATOR_STRING: "Visual Studio 15 2017 Win64" },
#         windows_container:
#           { dockerfile: .ci/Dockerfile.winx64, os_version: 2019 },
#       }
#     - {
#         env: { BITNESS: x86, GENERATOR_STRING: "Visual Studio 15 2017" },
#         windows_container:
#           { dockerfile: .ci/Dockerfile.winx86, os_version: 2019 },
#       }

#   use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'

#   curses_download_cache:
#     folder: PDCurses
#     fingerprint_script: echo pdcurses-fingerprint-2
#     populate_script:
#       - git clone https://github.com/wmcbrine/PDCurses

#   curses_build_script:
#     - cd PDCurses/wincon
#     - set VSCMD_DEBUG=1
#     - '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%BITNESS%'
#     - nmake -f Makefile.vc UTF8=Y WIDE=y
#     - cmake -E copy ../curses.h C:/include
#     - cmake -E copy ../panel.h C:/include
#     - cmake -E copy ../curspriv.h C:/include
#     - cmake -E copy pdcurses.lib C:/lib
#     - nmake -f Makefile.vc clean # Remove the generated files, so they aren't cached

#   lame_download_cache:
#     folder: lame-3.100
#     fingerprint_script: echo lame-3.100-fingerprint-2
#     populate_script:
#       - aria2c https://netix.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
#       - 7z x lame-3.100.tar.gz
#       - 7z x lame-3.100.tar
#       - cd lame-3.100
#       - ps: ((Get-Content -path .\Makefile.MSVC -Raw) -replace '/machine:I386','/machine:X64') | Set-Content -path .\Makefile.MSVCx64 # Setup for x64
#       - cmake -E copy Makefile.MSVC Makefile.MSVCx86
#       - cmake -E copy configMS.h config.h

#   lame_build_script:
#     - cd lame-3.100
#     - set VSCMD_DEBUG=1
#     - '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%BITNESS%'
#     - nmake -f Makefile.MSVC%BITNESS% comp=msvc asm=no DLL /D
#     - cmake -E copy output\libmp3lame.dll C:/lib
#     - cmake -E copy output\libmp3lame-static.lib C:/lib
#     - nmake -f Makefile.MSVC%BITNESS% comp=msvc asm=no clean /D

#   rtaudio_download_cache:
#     folder: rtaudio-5.1.0
#     fingerprint_script: echo rtaudio-5.1.0-fingerprint-0
#     populate_script:
#       - aria2c http://www.music.mcgill.ca/~gary/rtaudio/release/rtaudio-5.1.0.tar.gz
#       - 7z x rtaudio-5.1.0.tar.gz
#       - 7z x rtaudio-5.1.0.tar

#   rtaudio_build_script:
#     - cd rtaudio-5.1.0
#     - cmake -E make_directory __build && cd __build
#     - cmake -G "%GENERATOR_STRING%" .. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=%BITNESS%-windows --debug-output
#     - cmake --build . -v --config Release
#     - cmake --install .
#     - cd ..
#     - cmake -E copy __build\Release\rtaudio.lib C:/lib
#     - cmake -E copy __build\Release\rtaudio.dll C:/lib
#     - cmake -E copy ./RtAudio.cpp C:/include
#     - cmake -E copy RtAudio.h C:/include
#     - cmake -E remove_directory __build # Remove the generated files, so they aren't cached

#   build_script:
#     - cmake -E make_directory __build && cd __build
#     - cmake -G "%GENERATOR_STRING%" .. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=%BITNESS%-windows --debug-output
#     - cmake --build . -v --config Release
#     - cmake -E copy C:/lib/rtaudio.dll Release/

#   dist_script:
#     - cmake -E copy LICENCE.md __build/Release/
#     - cmake -E copy README.md __build/Release/
#     - cmake -E copy CHANGELOG.md __build/Release/
#     - cd __build/Release/*
#     - 7z a chronicle-win%BITNESS%-%CIRRUS_BUILD_ID%.zip ./*
#     - 7z -ttar a dummyfile ./* -so| 7z -si -tgzip a chronicle-win%BITNESS%-%CIRRUS_BUILD_ID%.tar.gz

#   package_artifacts:
#     path: ./__build/Release/*.zip

# publish_task:
#   container:
#     image: gcc:latest

#   depends_on:
#     - linux_build
#     - win_build
#   only_if: $CIRRUS_BRANCH == 'master'
#   publish_script:
#     - apt update && apt install python python-pip -y
#     - pip install b2
#     - wget https://api.cirrus-ci.com/v1/artifact/github/hcr923fm/chronicle/win_build/package/__build/Release/chronicle-winx86-${CIRRUS_BUILD_ID}.zip
#     - wget https://api.cirrus-ci.com/v1/artifact/github/hcr923fm/chronicle/win_build/package/__build/Release/chronicle-winx64-${CIRRUS_BUILD_ID}.zip
#     - wget https://api.cirrus-ci.com/v1/artifact/github/hcr923fm/chronicle/win_build/package/__build/Release/chronicle-winx86-${CIRRUS_BUILD_ID}.tar.gz
#     - wget https://api.cirrus-ci.com/v1/artifact/github/hcr923fm/chronicle/win_build/package/__build/Release/chronicle-winx64-${CIRRUS_BUILD_ID}.tar.gz
#     - CHRONICLE_MAJOR_VERSION=`awk '/MAJOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
#     - CHRONICLE_MINOR_VERSION=`awk '/MINOR/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
#     - CHRONICLE_PATCH_VERSION=`awk '/PATCH/ {print $5}' ../version.h | sed 's/[^0-9]//g'`
#     - CHRONICLE_VERSION=${CHRONICLE_MAJOR_VERSION}.${CHRONICLE_MINOR_VERSION}.${CHRONICLE_PATCH_VERSION}
#     - mv chronicle-winx86.zip chronicle-${CHRONICLE_VERSION}-win32.zip
#     - mv chronicle-winx64.zip chronicle-${CHRONICLE_VERSION}-win64.zip
#     - mv chronicle-winx86.tar.gz chronicle-${CHRONICLE_VERSION}-win32.tar.gz
#     - mv chronicle-winx64.tar.gz chronicle-${CHRONICLE_VERSION}-win64.tar.gz
#     - chmod +x .ci/*.sh
#     - b2 authorize-account $BACKBLAZE_APP_KEY_ID $BACKBLAZE_APP_KEY
#     - .ci/chronicle-b2-upload.sh
