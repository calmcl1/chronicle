env:
  BACKBLAZE_APP_KEY_ID: ENCRYPTED[95a37d7a31679c7fb32b03d05b33edb065dcf7f0f823e7fe721e3247e5f3668d4063591d5c733ade1fd7a32f5f859c5f]
  BACKBLAZE_APP_KEY: ENCRYPTED[770e70e48569f43396e50d0692a4c1abe64e4821c1ef816520c792ad6222c61641b7e56132e37896340f740720196604]

linux_build_task:
  container:
    image: gcc:latest

  apt_script:
    - apt-get update -qq
    - apt-get install libncurses5-dev libsndfile1-dev libasound2 libasound2-dev libflac-dev libvorbis-dev libogg-dev git build-essential python libtool libtool-bin wget libmp3lame-dev librtaudio-dev zip -qq -y

  submodules_script: git submodule sync --recursive && git submodule update --init --recursive

  cmake_cache:
    folder: cmake-3.15.2-Linux-x86_64
    populate_script:
      - wget https://github.com/Kitware/CMake/releases/download/v3.15.2/cmake-3.15.2-Linux-x86_64.tar.gz
      - tar xf cmake-3.15.2-Linux-x86_64.tar.gz

  cmake_install_script: cp -r cmake-3.15.2-Linux-x86_64/* /

  boost_cache:
    folder: boost_1_68_0
    fingerprint_script: echo boost-$CIRRUS_TASK_NAME-system-filesystem-program_options
    populate_script:
      - wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
      - tar xf boost_1_68_0.tar.gz
      - cd boost_1_68_0
      - ./bootstrap.sh --with-libraries=system,filesystem,program_options

  boost_build_script:
    - cd boost_1_68_0
    - ./b2 install

  spdlog_download_cache:
    folder: spdlog-1.3.1
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME
    populate_script:
      - wget https://github.com/gabime/spdlog/archive/v1.3.1.tar.gz
      - tar xf v1.3.1.tar.gz

  spdlog_install_script:
    - cd spdlog-1.3.1
    - mkdir -p __build && cd __build
    - cmake .. -DSPDLOG_BUILD_EXAMPLES=OFF -DSPDLOG_BUILD_BENCH=OFF -DSPDLOG_BUILD_TESTS=OFF
    - make -j
    - make install

  build_script:
    - mkdir -p __build
    - cd __build
    - cmake ..
    - cmake --build .

  dist_script:
    - chmod +x .ci/*.sh
    - .ci/chronicle-create-dist-archives.sh

  package_artifacts:
    path: __build/chronicle-*-linux.*

win_build_task:
  # Most sources need to be built from scratch, since the mingw version of pkg-config ignores PKG_CONFIG_PATH
  env:
    # Let's do it just for conveniences' sake
    PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
    PATH: "$PATH:/usr/local"
    matrix:
      - COMPILER_TRIPLET: x86_64-w64-mingw32
      - COMPILER_TRIPLET: i686-w64-mingw32
  container:
    image: ubuntu:latest

  apt_script:
    - apt-get update && apt-get install mingw-w64 mingw-w64-tools pkg-config git libtool libtool-bin build-essential wget autoconf automake python zip gcc-multilib g++-multilib -y
    - update-alternatives --set ${COMPILER_TRIPLET}-gcc /usr/bin/${COMPILER_TRIPLET}-gcc-posix
    - update-alternatives --set ${COMPILER_TRIPLET}-g++ /usr/bin/${COMPILER_TRIPLET}-g++-posix

  cmake_cache:
    folder: cmake-3.15.2-Linux-x86_64
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget https://github.com/Kitware/CMake/releases/download/v3.15.2/cmake-3.15.2-Linux-x86_64.tar.gz
      - tar xf cmake-3.15.2-Linux-x86_64.tar.gz

  cmake_install_script: cp -r cmake-3.15.2-Linux-x86_64/* /

  submodules_script: git submodule sync --recursive && git submodule update --init --recursive

  lame_download_cache:
    folder: lame-3.100
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget https://netix.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
      - tar xf lame-*

  lame_build_script:
    - cd lame-3.100
    - ./configure --disable-decoder --disable-shared --enable-static --host=${COMPILER_TRIPLET} --prefix=/usr/${COMPILER_TRIPLET}
    - make
    - make install

  libogg_download_cache:
    folder: libogg-1.3.3
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://downloads.xiph.org/releases/ogg/libogg-1.3.3.tar.gz
      - tar xf libogg-1.3.3.tar.gz

  libogg_install_script:
    - cd libogg-1.3.3
    - ./configure --host=${COMPILER_TRIPLET} --prefix=/usr/${COMPILER_TRIPLET}
    - make && make install

  libvorbis_download_cache:
    folder: libvorbis-1.3.6
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.6.tar.gz
      - tar xf libvorbis-1.3.6.tar.gz

  libvorbis_install_script:
    - cd libvorbis-1.3.6
    - ./configure --host=${COMPILER_TRIPLET} --prefix=/usr/${COMPILER_TRIPLET}
    - make && make install

  libflac_download_cache:
    folder: flac-1.3.2
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://downloads.xiph.org/releases/flac/flac-1.3.2.tar.xz
      - tar xJf flac-1.3.2.tar.xz

  libflac_install_script:
    - cd flac-1.3.2
    - ./configure --disable-thorough-tests --host=${COMPILER_TRIPLET} --prefix=/usr/${COMPILER_TRIPLET}
    - make && make install

  libspeex_download_cache:
    folder: speex-1.2.0
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://downloads.xiph.org/releases/speex/speex-1.2.0.tar.gz
      - tar xf speex-1.2.0.tar.gz

  libspeex_install_script:
    - cd speex-1.2.0
    - ./configure --host=${COMPILER_TRIPLET} --prefix=/usr/${COMPILER_TRIPLET}
    - make && make install

  libsndfile_download_cache:
    folder: libsndfile-1.0.28
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://www.mega-nerd.com/libsndfile/files/libsndfile-1.0.28.tar.gz
      - tar xf libsndfile-1.0.28.tar.gz

  libsndfile_build_script:
    - cd libsndfile-1.0.28
    - ./configure --host=${COMPILER_TRIPLET} --disable-static --prefix=/usr/${COMPILER_TRIPLET}
    - make
    - make install

  rtaudio_download_cache:
    folder: rtaudio
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget http://www.music.mcgill.ca/~gary/rtaudio/release/rtaudio-5.1.0.tar.gz
      - tar xf rtaudio-5.1.0.tar.gz

  rtaudio_build_script:
    # Depends on libsndfile
    - cd rtaudio-5.1.0
    - mkdir -p __build && cd __build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../../.ci/mingw32.cmake -DRTAUDIO_API_DS=ON -DRTAUDIO_API_WASAPI=ON -DRTAUDIO_API_JACK=OFF -DCMAKE_INSTALL_PREFIX=/usr/${COMPILER_TRIPLET}
    - cmake --build .
    - cmake --install .

  ncurses_download_cache:
    folder: ncurses-6.1
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget ftp://ftp.invisible-island.net/ncurses/ncurses-6.1.tar.gz
      - tar xf ncurses-6.1.tar.gz

  ncurses_build_script:
    - cd ncurses-6.1
    - ./configure --enable-term-driver --enable-sp-funcs --host=${COMPILER_TRIPLET} --with-build-cc=gcc --with-pkg-config-libdir=${PKG_CONFIG_PATH} --enable-pc-files --prefix=/usr/${COMPILER_TRIPLET}
    - make
    - make install

  boost_build_script:
    - wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
    - tar xf boost_1_68_0.tar.gz
    - cd boost_1_68_0
    - 'echo "using gcc : : ${COMPILER_TRIPLET}-gcc ;" > user-config.jam'
    - ./bootstrap.sh --with-libraries=system,filesystem,program_options --prefix=/usr/${COMPILER_TRIPLET}
    - if [[ $COMPILER_TRIPLET == "x86_64"* ]]; then export ADDRESS_MODEL=64; else export ADDRESS_MODEL=32; fi;
    - ./b2 --user-config=user-config.jam --build-type=complete --layout=versioned toolset=gcc target-os=windows link=static release address-model=${ADDRESS_MODEL} architecture=x86 install

  spdlog_download_cache:
    folder: spdlog-1.3.1
    fingerprint_script: echo $CIRRUS_OS-$CIRRUS_TASK_NAME-$COMPILER_TRIPLET
    populate_script:
      - wget https://github.com/gabime/spdlog/archive/v1.3.1.tar.gz
      - tar xf v1.3.1.tar.gz

  spdlog_install_script:
    - cd spdlog-1.3.1
    - mkdir -p __build && cd __build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../../.ci/mingw32.cmake -DSPDLOG_BUILD_EXAMPLES=OFF -DSPDLOG_BUILD_BENCH=OFF -DSPDLOG_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/${COMPILER_TRIPLET}
    - make -j
    - make install

  build_script:
    - mkdir -p __build
    - cd __build
    - CPPFLAGS="-D_ISOC99_SOURCE -lole32 -lwinmm -ldsound -Wl,--trace"
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=../.ci/mingw32.cmake
    - cmake --build . -v

  dist_script:
    - chmod +x .ci/*.sh
    - .ci/chronicle-create-dist-archives.sh

  package_artifacts:
    path: __build/chronicle-*-win*.*

publish_task:
  container:
    image: gcc:latest

  depends_on:
    - linux_build
    - win_build
  only_if: $CIRRUS_BRANCH == 'master'
  publish_script:
    - apt update && apt install python python-pip -y
    - pip install b2
    - chmod +x .ci/*.sh
    - b2 authorize-account $BACKBLAZE_APP_KEY_ID $BACKBLAZE_APP_KEY
    - .ci/chronicle-b2-upload.sh
